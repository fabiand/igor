#!/bin/env python
# -*- coding: utf-8 -*
__author__ = 'dracher'
import sys
import os
import json
import sqlite3
from itertools import izip
from pprint import pprint as pp
root_path = os.path.dirname(os.path.abspath(__file__))
root_path = root_path[:root_path.rfind(os.sep)]
sys.path.append(root_path)
from igor.utils import run
from igor import log

logger = log.getLogger(__name__)

DB_PATH = os.path.join(root_path, 'results.sqlite')

conn = sqlite3.connect(DB_PATH)
conn.text_factory = str
cur = conn.cursor()
cur.executescript(open('%s/data/database.sql' % root_path, 'r').read())

HOOK_NAME = sys.argv[1]
SESSION = sys.argv[2]

CMD01 = "curl --silent http://127.0.0.1:8080/jobs/%s/status" % SESSION
CMD02 = "curl --silent http://127.0.0.1:8080/jobs/%s/artifacts" % SESSION


def get_results(d):
    for i in d:
        yield (i['created_at'],
               i['testcase']['name'],
               i['is_success'],
               i['is_passed'],
               i['is_abort'],
               i['is_skipped'],
               i['note'],
               i['runtime'],
               i['log'],
               i['annotations'],
               SESSION)


def get_env(d):
    yield (d['id'],
           d['additional_kargs'],
           d['host'],
           d['profile'])


def get_artifacts():
    ret = run(CMD02, with_retval=True)
    tmp = []
    if not ret[0]:
        try:
            ret = json.loads(ret[1])
        except ValueError as e:
            logger.error("Can't get job status from job %s, casue %s" % (SESSION, e))
            exit(-1)
        try:
            assert ret.__class__ is list and ret
        except AssertionError as e:
            logger.error(e)
            return ["No artifacts found"]
        for a in ret:
            r = run(CMD02+'/'+a, with_retval=True)
            tmp.append(r[1])

        return izip(ret, tmp, [SESSION]*len(ret))


def insert_to_db(table, data, column_count):
    cmd = "insert into %s values (%s)" % (table, ','.join(['?']*column_count))
    cur.executemany(cmd, data)
    conn.commit()


def main():
    ret = run(CMD01, with_retval=True)
    if not ret[0]:
        try:
            d = json.loads(ret[1])
        except ValueError as e:
            logger.error("Can't get job status from job %s, casue %s" % (SESSION, e))
            exit(-1)
        assert d.__class__ is dict
        assert 'additional_kargs' in d and 'results' in d

        for table, data, column_count in [('env_list', get_env(d), 4),
                                          ('results', get_results(d['results']), 11),
                                          ('artifacts', get_artifacts(), 3)]:
            insert_to_db(table, data, column_count)
        conn.close()

if __name__ == "__main__":
    main()
